{"remainingRequest":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/babel-loader/lib/index.js!/Users/roywang/Documents/GitHub/firebase_storage/node_modules/eslint-loader/index.js??ref--13-0!/Users/roywang/Documents/GitHub/firebase_storage/src/store.js","dependencies":[{"path":"/Users/roywang/Documents/GitHub/firebase_storage/src/store.js","mtime":1568231510991},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _toConsumableArray from \"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex); // fire base\n\nimport firebase from '@/firebaseConfig.js';\nvar store = new Vuex.Store({\n  state: {\n    currentUser: null,\n    loginMsg: null,\n    loginMsgs: [],\n    currentFolder: [],\n    contentWithinFolder: null,\n    selectedNode: null,\n    uploadingProgress: 0,\n    favoriteInfo: null,\n    searchResults: []\n  },\n  getters: {\n    rootFolderRef: function rootFolderRef(state) {\n      if (!state.currentUser) {\n        return null;\n      }\n\n      var root = \"users/\".concat(state.currentUser.uid);\n      var rootFolderRef = firebase.storage().ref(root);\n      return rootFolderRef;\n    },\n    currentFolderRef: function currentFolderRef(state, getters) {\n      if (!state.currentUser) {\n        return null;\n      } // const root = `users/${state.currentUser.uid}`;\n      // const rootFolderRef = firebase.storage().ref(root);\n\n\n      var rootFolderRef = getters.rootFolderRef;\n\n      if (!state.currentFolder.length) {\n        return rootFolderRef;\n      }\n\n      var folderPath = state.currentFolder.join('/');\n      var currentFolderRef = rootFolderRef.child(folderPath);\n      return currentFolderRef;\n    },\n    currentUserCollectionRef: function currentUserCollectionRef(state) {\n      if (!state.currentUser) {\n        return null;\n      }\n\n      var collectionRef = firebase.firestore().collection(\"\".concat(state.currentUser.uid));\n      return collectionRef;\n    }\n  },\n  mutations: {\n    INITIALIZE: function INITIALIZE(state) {\n      state.currentUser = null;\n      state.loginMsg = null;\n      state.loginMsgs = [];\n      state.currentFolder = [];\n      state.contentWithinFolder = null;\n      state.selectedNode = null;\n      state.uploadingProgress = 0;\n      state.favoriteInfo = null;\n      state.searchResults = [];\n    },\n    SET_CURRENT_USER: function SET_CURRENT_USER(state, user) {\n      state.currentUser = user;\n    },\n    SET_CONTENT_WITHIN_FOLDER: function SET_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = content;\n    },\n    CLEAR_CONTENT_WITHIN_FOLDER: function CLEAR_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = null;\n    },\n    PUSH_FOLDER: function PUSH_FOLDER(state, folder) {\n      state.currentFolder.push(folder);\n    },\n    POP_FOLDER: function POP_FOLDER(state, index) {\n      state.currentFolder.splice(index + 1);\n    },\n    SET_FOLDER: function SET_FOLDER(state, folders) {\n      state.currentFolder = _toConsumableArray(folders);\n    },\n    SET_LOGIN_MSG: function SET_LOGIN_MSG(state, _ref) {\n      var msg = _ref.msg,\n          type = _ref.type;\n      state.loginMsg = {\n        msg: msg,\n        type: type\n      };\n      state.loginMsgs.push({\n        msg: msg,\n        type: type\n      });\n      setTimeout(function () {\n        state.loginMsgs.shift();\n      }, 2000);\n    },\n    SET_NODE_INFO: function SET_NODE_INFO(state, info) {\n      state.selectedNode = info;\n    },\n    CLEAR_NODE_INFO: function CLEAR_NODE_INFO(state) {\n      state.selectedNode = null;\n    },\n    UPDATE_LOADING_PROGRESS: function UPDATE_LOADING_PROGRESS(state, percentage) {\n      state.uploadingProgress = percentage;\n    },\n    SET_FAVORITE_INFO: function SET_FAVORITE_INFO(state, info) {\n      state.favoriteInfo = info;\n    },\n    SORT_FAVORITE_PATHS: function SORT_FAVORITE_PATHS(state) {\n      var func = function func(a, b) {\n        var segs_a = a.split('/');\n        var name_a = segs_a[segs_a.length - 1];\n        var score_a = name_a.charCodeAt(0);\n        var segs_b = b.split('/');\n        var name_b = segs_b[segs_b.length - 1];\n        var score_b = name_b.charCodeAt(0); // seperate file and folder\n\n        if (name_a.includes('.')) {\n          score_a += 1000;\n        }\n\n        if (name_b.includes('.')) {\n          score_b += 1000;\n        }\n\n        return score_a - score_b;\n      };\n\n      state.favoriteInfo.paths.sort(func);\n    },\n    PUSH_SEARCH_RESULT: function PUSH_SEARCH_RESULT(state, item) {\n      state.searchResults.push(item);\n    },\n    CLEAR_SEARCH_RESULT: function CLEAR_SEARCH_RESULT(state) {\n      state.searchResults.splice(0);\n    }\n  },\n  actions: {\n    deleteFavoritePath: function deleteFavoritePath(context, targetPath) {\n      var paths = context.state.favoriteInfo.paths;\n      paths.forEach(function (path, i) {\n        if (path === targetPath) {\n          paths.splice(i, 1);\n        }\n      });\n      var collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').update({\n        paths: paths\n      }).then(function () {\n        console.log('sync with cloud');\n      });\n    },\n    toggleFavoritePath: function toggleFavoritePath(context, targetPath) {\n      var paths = context.state.favoriteInfo.paths;\n      var include = false;\n      paths.forEach(function (path, i) {\n        if (path === targetPath) {\n          paths.splice(i, 1);\n          include = true;\n        }\n      });\n\n      if (include === false) {\n        paths.push(targetPath);\n      }\n\n      context.commit('SORT_FAVORITE_PATHS');\n      var collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').update({\n        paths: paths\n      }).then(function () {\n        console.log('sync with cloud');\n      });\n    },\n    getFavoriteInfo: function getFavoriteInfo(context) {\n      var collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').get().then(function (doc) {\n        if (!doc.data()) {\n          collectionRef.doc('favorite').set({\n            paths: []\n          }).then(function () {\n            console.log('initialize doc');\n          });\n          context.commit('SET_FAVORITE_INFO', {\n            paths: []\n          });\n        } else {\n          context.commit('SET_FAVORITE_INFO', doc.data());\n          context.commit('SORT_FAVORITE_PATHS');\n        }\n      });\n    },\n    popFolder: function popFolder(context, index) {\n      context.commit('POP_FOLDER', index);\n    },\n    pushFolder: function pushFolder(context, prefix) {\n      context.commit('PUSH_FOLDER', prefix.name);\n    },\n    setFolder: function setFolder(context, folders) {\n      context.commit('SET_FOLDER', folders);\n    },\n    getContentWithinFolder: function getContentWithinFolder(context) {\n      context.getters.currentFolderRef.listAll().then(function (res) {\n        context.commit('SET_CONTENT_WITHIN_FOLDER', res); // get download links\n\n        res.items.forEach(function (item) {\n          firebase.storage().ref(item.fullPath).getDownloadURL().then(function (url) {\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'blob';\n\n            xhr.onload = function (event) {\n              var blob = xhr.response;\n              var blobURL = window.URL.createObjectURL(blob);\n              Vue.set(item, 'downloadLink', blobURL);\n            };\n\n            xhr.open('GET', url);\n            xhr.send();\n          });\n        });\n      }).catch(function (err) {\n        console.log(err);\n      }).then(function () {\n        context.commit('CLEAR_NODE_INFO');\n      });\n    },\n    createAccount: function createAccount(context, _ref2) {\n      var email = _ref2.email,\n          password = _ref2.password;\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Account  has been successfully created!',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    logIn: function logIn(context, _ref3) {\n      var email = _ref3.email,\n          password = _ref3.password;\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign in!',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    signOut: function signOut(context) {\n      firebase.auth().signOut().then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign out.',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    uploadFile: function uploadFile(context, file) {\n      var currentFolderRef = context.getters.currentFolderRef;\n      var fileRef = currentFolderRef.child(\"/\".concat(file.name));\n      var uploadTask = fileRef.put(file);\n      uploadTask.on('state_changed', function (snapshot) {\n        var percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        context.commit('UPDATE_LOADING_PROGRESS', percentage);\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('upload is paused');\n            break;\n\n          case 'running':\n            console.log('upload is running');\n            break;\n        }\n      }, function (err) {\n        context.commit('UPDATE_LOADING_PROGRESS', 0);\n\n        switch (err.code) {\n          case 'storage/unauthorized':\n            console.log(err.code);\n            break;\n\n          case 'storage/canceled':\n            console.log(err.code);\n            break;\n\n          case 'storage/unknown':\n            console.log(err.code);\n            break;\n        }\n      }, function () {\n        store.dispatch('getContentWithinFolder');\n        context.commit('UPDATE_LOADING_PROGRESS', 0);\n      });\n    },\n    deleteItem: function deleteItem(context, item) {\n      var fileRef = firebase.storage().ref(item.location.path_);\n      store.dispatch('deleteFavoritePath', item.location.path_);\n      fileRef.delete().then(function () {\n        console.log('file deleted');\n        store.dispatch('getContentWithinFolder');\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    createFolder: function createFolder(context, newFolderName) {\n      var ref = context.getters.currentFolderRef.child(\"\".concat(newFolderName, \"/folderInitDoc.txt\"));\n      ref.putString('init new folder').then(function (snapshot) {\n        console.log(snapshot);\n        store.dispatch('getContentWithinFolder');\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    deleteFolder: function deleteFolder(context, prefix) {\n      context.dispatch('deleteFavoritePath', prefix.location.path_);\n      prefix.listAll().then(function (res) {\n        res.items.forEach(function (item) {\n          context.dispatch('deleteItem', item);\n        });\n        res.prefixes.forEach(function (prefix) {\n          context.dispatch('deleteFolder', prefix);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    traverseStorage: function traverseStorage(context, _ref4) {\n      var keyword = _ref4.keyword,\n          searchingRoot = _ref4.searchingRoot;\n\n      if (!searchingRoot) {\n        context.commit('CLEAR_SEARCH_RESULT');\n        searchingRoot = context.getters.rootFolderRef;\n      }\n\n      searchingRoot.listAll().then(function (res) {\n        res.items.forEach(function (item) {\n          if (item.name.toLowerCase().includes(keyword.toLowerCase())) {\n            item.type = 'file';\n            context.commit('PUSH_SEARCH_RESULT', item);\n          }\n        });\n        res.prefixes.forEach(function (prefix) {\n          if (prefix.name.toLowerCase().includes(keyword.toLowerCase())) {\n            prefix.type = 'folder';\n            context.commit('PUSH_SEARCH_RESULT', prefix);\n          }\n\n          var nextSearchingRoot = firebase.storage().ref(prefix.location.path_);\n          context.dispatch('traverseStorage', {\n            keyword: keyword,\n            searchingRoot: nextSearchingRoot\n          });\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    selectNode: function selectNode(context, _ref5) {\n      var node = _ref5.node,\n          type = _ref5.type;\n\n      if (type === 'file') {\n        var nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.getMetadata().then(function (metadata) {\n          var nodeInfo = {\n            node: node,\n            type: type,\n            metadata: metadata\n          };\n          context.commit('SET_NODE_INFO', nodeInfo);\n        });\n      } else if (type === 'folder') {\n        var _nodeRef = firebase.storage().ref(node.fullPath);\n\n        _nodeRef.listAll().then(function (res) {\n          var nodeInfo = {\n            node: node,\n            type: type,\n            subFolders: res.prefixes,\n            subFiles: res.items\n          };\n          context.commit('SET_NODE_INFO', nodeInfo);\n        });\n      }\n    }\n  }\n});\nfirebase.auth().onAuthStateChanged(function (user) {\n  store.commit('SET_CURRENT_USER', user);\n\n  if (store.state.currentUser) {\n    store.dispatch('getFavoriteInfo');\n  } else {\n    store.commit('INITIALIZE');\n  }\n});\nstore.watch(function (state) {\n  return state.currentFolder;\n}, function () {\n  if (!store.state.currentUser) {\n    return;\n  }\n\n  store.commit('CLEAR_CONTENT_WITHIN_FOLDER');\n  store.dispatch('getContentWithinFolder');\n});\nexport default store;",{"version":3,"sources":["/Users/roywang/Documents/GitHub/firebase_storage/src/store.js"],"names":["Vue","Vuex","use","firebase","store","Store","state","currentUser","loginMsg","loginMsgs","currentFolder","contentWithinFolder","selectedNode","uploadingProgress","favoriteInfo","searchResults","getters","rootFolderRef","root","uid","storage","ref","currentFolderRef","length","folderPath","join","child","currentUserCollectionRef","collectionRef","firestore","collection","mutations","INITIALIZE","SET_CURRENT_USER","user","SET_CONTENT_WITHIN_FOLDER","content","CLEAR_CONTENT_WITHIN_FOLDER","PUSH_FOLDER","folder","push","POP_FOLDER","index","splice","SET_FOLDER","folders","SET_LOGIN_MSG","msg","type","setTimeout","shift","SET_NODE_INFO","info","CLEAR_NODE_INFO","UPDATE_LOADING_PROGRESS","percentage","SET_FAVORITE_INFO","SORT_FAVORITE_PATHS","func","a","b","segs_a","split","name_a","score_a","charCodeAt","segs_b","name_b","score_b","includes","paths","sort","PUSH_SEARCH_RESULT","item","CLEAR_SEARCH_RESULT","actions","deleteFavoritePath","context","targetPath","forEach","path","i","doc","update","then","console","log","toggleFavoritePath","include","commit","getFavoriteInfo","get","data","set","popFolder","pushFolder","prefix","name","setFolder","getContentWithinFolder","listAll","res","items","fullPath","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","event","blob","response","blobURL","window","URL","createObjectURL","open","send","catch","err","createAccount","email","password","auth","createUserWithEmailAndPassword","message","logIn","signInWithEmailAndPassword","signOut","uploadFile","file","fileRef","uploadTask","put","on","snapshot","bytesTransferred","totalBytes","code","dispatch","deleteItem","location","path_","delete","createFolder","newFolderName","putString","deleteFolder","prefixes","traverseStorage","keyword","searchingRoot","toLowerCase","nextSearchingRoot","selectNode","node","nodeRef","getMetadata","metadata","nodeInfo","subFolders","subFiles","onAuthStateChanged","watch"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// fire base\nimport firebase from '@/firebaseConfig.js'\n\nconst store = new Vuex.Store({\n  state: {\n    currentUser: null,\n    loginMsg: null,\n    loginMsgs: [],\n    currentFolder: [],\n    contentWithinFolder: null,\n    selectedNode: null,\n    uploadingProgress: 0,\n    favoriteInfo: null,\n    searchResults: []\n  },\n  getters: {\n    rootFolderRef: state => {\n      if (!state.currentUser) {\n        return null\n      }\n      const root = `users/${state.currentUser.uid}`;\n      const rootFolderRef = firebase.storage().ref(root);\n      return rootFolderRef\n    },\n    currentFolderRef: (state,\n      getters) => {\n      if (!state.currentUser) {\n        return null\n      }\n\n      // const root = `users/${state.currentUser.uid}`;\n      // const rootFolderRef = firebase.storage().ref(root);\n      const rootFolderRef = getters.rootFolderRef;\n      if (!state.currentFolder.length) {\n        return rootFolderRef\n      }\n\n      const folderPath = state.currentFolder.join('/');\n      const currentFolderRef = rootFolderRef.child(folderPath);\n      return currentFolderRef\n    },\n    currentUserCollectionRef: state => {\n      if (!state.currentUser) {\n        return null\n      }\n      const collectionRef = firebase.firestore().collection(`${state.currentUser.uid}`)\n      return collectionRef\n    }\n  },\n  mutations: {\n    INITIALIZE(state) {\n      state.currentUser = null;\n      state.loginMsg = null;\n      state.loginMsgs = [];\n      state.currentFolder = [];\n      state.contentWithinFolder = null;\n      state.selectedNode = null;\n      state.uploadingProgress = 0;\n      state.favoriteInfo = null;\n      state.searchResults = []\n    },\n    SET_CURRENT_USER(state, user) {\n      state.currentUser = user;\n    },\n    SET_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = content;\n    },\n    CLEAR_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = null;\n    },\n    PUSH_FOLDER(state, folder) {\n      state.currentFolder.push(folder)\n    },\n    POP_FOLDER(state, index) {\n      state.currentFolder.splice(index + 1)\n    },\n    SET_FOLDER(state, folders) {\n      state.currentFolder = [...folders];\n    },\n    SET_LOGIN_MSG(state, {\n      msg,\n      type\n    }) {\n      state.loginMsg = {\n        msg,\n        type\n      };\n      state.loginMsgs.push({\n        msg,\n        type\n      });\n      setTimeout(() => {\n        state.loginMsgs.shift();\n      }, 2000)\n    },\n    SET_NODE_INFO(state, info) {\n      state.selectedNode = info;\n    },\n    CLEAR_NODE_INFO(state) {\n      state.selectedNode = null\n    },\n    UPDATE_LOADING_PROGRESS(state, percentage) {\n      state.uploadingProgress = percentage;\n    },\n    SET_FAVORITE_INFO(state, info) {\n      state.favoriteInfo = info;\n    },\n    SORT_FAVORITE_PATHS(state) {\n      const func = (a, b) => {\n        const segs_a = a.split('/');\n        const name_a = segs_a[segs_a.length - 1];\n        let score_a = name_a.charCodeAt(0);\n        const segs_b = b.split('/');\n        const name_b = segs_b[segs_b.length - 1];\n        let score_b = name_b.charCodeAt(0);\n\n        // seperate file and folder\n        if (name_a.includes('.')) {\n          score_a += 1000;\n        }\n        if (name_b.includes('.')) {\n          score_b += 1000;\n        }\n        return score_a - score_b\n      }\n      state.favoriteInfo.paths.sort(func);\n    },\n    PUSH_SEARCH_RESULT(state, item) {\n      state.searchResults.push(item);\n    },\n    CLEAR_SEARCH_RESULT(state) {\n      state.searchResults.splice(0);\n    }\n  },\n  actions: {\n    deleteFavoritePath(context, targetPath) {\n\n      const paths = context.state.favoriteInfo.paths;\n\n      paths.forEach((path, i) => {\n        if (path === targetPath) {\n          paths.splice(i, 1);\n        }\n      })\n\n      const collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').update({\n        paths\n      }).then(() => {\n        console.log('sync with cloud');\n      })\n    },\n    toggleFavoritePath(context, targetPath) {\n\n      const paths = context.state.favoriteInfo.paths;\n\n      let include = false;\n      paths.forEach((path, i) => {\n        if (path === targetPath) {\n          paths.splice(i, 1);\n          include = true;\n        }\n      })\n      if (include === false) {\n        paths.push(targetPath);\n      }\n      context.commit('SORT_FAVORITE_PATHS');\n\n      const collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').update({\n        paths\n      }).then(() => {\n        console.log('sync with cloud');\n      })\n    },\n    getFavoriteInfo(context) {\n      const collectionRef = context.getters.currentUserCollectionRef;\n      collectionRef.doc('favorite').get().then(doc => {\n        if (!doc.data()) {\n          collectionRef.doc('favorite').set({\n            paths: []\n          }).then(() => {\n            console.log('initialize doc')\n          })\n          context.commit('SET_FAVORITE_INFO', {\n            paths: []\n          });\n        } else {\n          context.commit('SET_FAVORITE_INFO', doc.data());\n          context.commit('SORT_FAVORITE_PATHS');\n        }\n      })\n    },\n    popFolder(context, index) {\n      context.commit('POP_FOLDER', index);\n    },\n    pushFolder(context, prefix) {\n      context.commit('PUSH_FOLDER', prefix.name);\n    },\n    setFolder(context, folders) {\n      context.commit('SET_FOLDER', folders);\n    },\n    getContentWithinFolder(context) {\n      context.getters.currentFolderRef.listAll().then(res => {\n          context.commit('SET_CONTENT_WITHIN_FOLDER', res)\n          // get download links\n          res.items.forEach(item => {\n            firebase.storage().ref(item.fullPath).getDownloadURL().then(url => {\n              const xhr = new XMLHttpRequest();\n              xhr.responseType = 'blob';\n              xhr.onload = function (event) {\n                const blob = xhr.response;\n                const blobURL = window.URL.createObjectURL(blob);\n                Vue.set(item, 'downloadLink', blobURL);\n              };\n              xhr.open('GET', url);\n              xhr.send();\n            })\n          })\n        })\n        .catch(err => {\n          console.log(err);\n        }).then(() => {\n          context.commit('CLEAR_NODE_INFO');\n        })\n    },\n    createAccount(context, {\n      email,\n      password\n    }) {\n      firebase.auth().createUserWithEmailAndPassword(email, password).then((res) => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: 'Account  has been successfully created!',\n            type: 'success'\n          })\n        })\n        .catch(err => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: err.message,\n            type: 'error'\n          });\n        })\n    },\n    logIn(context, {\n      email,\n      password\n    }) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then((res) => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: 'Successfully sign in!',\n            type: 'success'\n          });\n        })\n        .catch(err => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: err.message,\n            type: 'error'\n          });\n        })\n    },\n    signOut(context) {\n      firebase.auth().signOut().then(res => {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign out.',\n          type: 'success'\n        });\n      }).catch(err => {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      })\n    },\n    uploadFile(context, file) {\n      const currentFolderRef = context.getters.currentFolderRef;\n      const fileRef = currentFolderRef.child(`/${file.name}`)\n      const uploadTask = fileRef.put(file);\n\n      uploadTask.on('state_changed', snapshot => {\n        const percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        context.commit('UPDATE_LOADING_PROGRESS', percentage);\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('upload is paused');\n            break;\n          case 'running':\n            console.log('upload is running');\n            break;\n        }\n      }, err => {\n        context.commit('UPDATE_LOADING_PROGRESS', 0);\n        switch (err.code) {\n          case 'storage/unauthorized':\n            console.log(err.code);\n            break;\n          case 'storage/canceled':\n            console.log(err.code);\n            break;\n          case 'storage/unknown':\n            console.log(err.code);\n            break;\n        }\n      }, () => {\n        store.dispatch('getContentWithinFolder');\n        context.commit('UPDATE_LOADING_PROGRESS', 0);\n      })\n    },\n    deleteItem(context, item) {\n      const fileRef = firebase.storage().ref(item.location.path_);\n      store.dispatch('deleteFavoritePath', item.location.path_);\n      fileRef.delete().then(() => {\n        console.log('file deleted');\n        store.dispatch('getContentWithinFolder');\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    createFolder(context, newFolderName) {\n      const ref = context.getters.currentFolderRef.child(\n        `${newFolderName}/folderInitDoc.txt`);\n      ref.putString('init new folder').then(snapshot => {\n        console.log(snapshot);\n        store.dispatch('getContentWithinFolder');\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    deleteFolder(context, prefix) {\n      context.dispatch('deleteFavoritePath', prefix.location.path_);\n      prefix.listAll().then(res => {\n        res.items.forEach(item => {\n          context.dispatch('deleteItem', item);\n        })\n        res.prefixes.forEach(prefix => {\n          context.dispatch('deleteFolder', prefix);\n        })\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    traverseStorage(context, {\n      keyword,\n      searchingRoot\n    }) {\n      if (!searchingRoot) {\n        context.commit('CLEAR_SEARCH_RESULT');\n        searchingRoot = context.getters.rootFolderRef;\n      }\n      searchingRoot.listAll().then(res => {\n        res.items.forEach(item => {\n          if (item.name.toLowerCase().includes(keyword.toLowerCase())) {\n            item.type = 'file';\n            context.commit('PUSH_SEARCH_RESULT', item);\n          }\n        })\n        res.prefixes.forEach(prefix => {\n          if (prefix.name.toLowerCase().includes(keyword.toLowerCase())) {\n            prefix.type = 'folder';\n            context.commit('PUSH_SEARCH_RESULT', prefix);\n          }\n          const nextSearchingRoot = firebase.storage().ref(prefix.location.path_);\n          context.dispatch('traverseStorage', {\n            keyword,\n            searchingRoot: nextSearchingRoot\n          });\n        })\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    selectNode(context, {\n      node,\n      type\n    }) {\n      if (type === 'file') {\n        const nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.getMetadata().then(metadata => {\n          const nodeInfo = {\n            node,\n            type,\n            metadata\n          }\n          context.commit('SET_NODE_INFO', nodeInfo)\n        })\n      } else if (type === 'folder') {\n        const nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.listAll().then(res => {\n          const nodeInfo = {\n            node,\n            type,\n            subFolders: res.prefixes,\n            subFiles: res.items\n          }\n          context.commit('SET_NODE_INFO', nodeInfo)\n        })\n      }\n    },\n  },\n});\n\nfirebase.auth().onAuthStateChanged(user => {\n  store.commit('SET_CURRENT_USER', user);\n  if (store.state.currentUser) {\n    store.dispatch('getFavoriteInfo');\n  } else {\n    store.commit('INITIALIZE')\n  }\n})\n\nstore.watch(state => {\n  return state.currentFolder\n}, () => {\n  if (!store.state.currentUser) {\n    return\n  }\n  store.commit('CLEAR_CONTENT_WITHIN_FOLDER')\n  store.dispatch('getContentWithinFolder');\n})\n\nexport default store\n"]}]}