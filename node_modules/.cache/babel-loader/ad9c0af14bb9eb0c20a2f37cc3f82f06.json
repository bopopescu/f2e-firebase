{"remainingRequest":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/babel-loader/lib/index.js!/Users/roywang/Documents/GitHub/firebase_storage/node_modules/eslint-loader/index.js??ref--13-0!/Users/roywang/Documents/GitHub/firebase_storage/src/store.js","dependencies":[{"path":"/Users/roywang/Documents/GitHub/firebase_storage/src/store.js","mtime":1567962703625},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/roywang/Documents/GitHub/firebase_storage/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex); // fire base\n\nimport firebase from '@/firebaseConfig.js';\nfirebase.auth().onAuthStateChanged(function (user) {\n  store.commit('SET_CURRENT_USER', user);\n});\nvar store = new Vuex.Store({\n  state: {\n    currentUser: null,\n    loginMsg: null,\n    currentFolder: [],\n    contentWithinFolder: null,\n    selectedNode: null\n  },\n  getters: {\n    currentFolderRef: function currentFolderRef(state) {\n      if (!state.currentUser) {\n        return null;\n      }\n\n      var root = \"users/\".concat(state.currentUser.uid);\n      var rootFolderRef = firebase.storage().ref(root);\n\n      if (!state.currentFolder.length) {\n        return rootFolderRef;\n      }\n\n      var folderPath = state.currentFolder.join('/');\n      var currentFolderRef = rootFolderRef.child(folderPath);\n      return currentFolderRef;\n    }\n  },\n  mutations: {\n    SET_CURRENT_USER: function SET_CURRENT_USER(state, user) {\n      state.currentUser = user;\n    },\n    SET_CONTENT_WITHIN_FOLDER: function SET_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = content;\n    },\n    CLEAR_CONTENT_WITHIN_FOLDER: function CLEAR_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = null;\n    },\n    PUSH_FOLDER: function PUSH_FOLDER(state, folder) {\n      state.currentFolder.push(folder);\n    },\n    POP_FOLDER: function POP_FOLDER(state, index) {\n      state.currentFolder.splice(index + 1);\n    },\n    SET_LOGIN_MSG: function SET_LOGIN_MSG(state, _ref) {\n      var msg = _ref.msg,\n          type = _ref.type;\n      state.loginMsg = {\n        msg: msg,\n        type: type\n      };\n    },\n    SET_NODE_INFO: function SET_NODE_INFO(state, info) {\n      state.selectedNode = info;\n    },\n    CLEAR_NODE_INFO: function CLEAR_NODE_INFO(state) {\n      state.selectedNode = null;\n    }\n  },\n  actions: {\n    popFolder: function popFolder(context, index) {\n      context.commit('POP_FOLDER', index);\n    },\n    pushFolder: function pushFolder(context, prefix) {\n      context.commit('PUSH_FOLDER', prefix.name);\n    },\n    getContentWithinFolder: function getContentWithinFolder(context) {\n      context.getters.currentFolderRef.listAll().then(function (res) {\n        context.commit('SET_CONTENT_WITHIN_FOLDER', res); // get download links\n\n        res.items.forEach(function (item) {\n          firebase.storage().ref(item.fullPath).getDownloadURL().then(function (url) {\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'blob';\n\n            xhr.onload = function (event) {\n              var blob = xhr.response;\n              var blobURL = window.URL.createObjectURL(blob);\n              Vue.set(item, 'downloadLink', blobURL);\n            };\n\n            xhr.open('GET', url);\n            xhr.send();\n          });\n        });\n      }).catch(function (err) {\n        console.log(err);\n      }).then(function () {\n        context.commit('CLEAR_NODE_INFO');\n      });\n    },\n    createAccount: function createAccount(context, _ref2) {\n      var email = _ref2.email,\n          password = _ref2.password;\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Account  has been successfully created!',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    logIn: function logIn(context, _ref3) {\n      var email = _ref3.email,\n          password = _ref3.password;\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign in!',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    signOut: function signOut(context) {\n      firebase.auth().signOut().then(function (res) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign out.',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      });\n    },\n    uploadFile: function uploadFile(context, file) {\n      var currentFolderRef = context.getters.currentFolderRef;\n      var fileRef = currentFolderRef.child(\"/\".concat(file.name));\n      var uploadTask = fileRef.put(file);\n      uploadTask.on('state_changed', function (snapshot) {\n        var percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(percentage);\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('uploiad paused');\n            break;\n\n          case 'running':\n            console.log('upload is running');\n            break;\n        }\n      }, function (err) {\n        switch (err.code) {\n          case 'storage/unauthorized':\n            console.log(err.code);\n            break;\n\n          case 'storage/canceled':\n            console.log(err.code);\n            break;\n\n          case 'storage/unknown':\n            console.log(err.code);\n            break;\n        }\n      }, function () {\n        store.dispatch('getContentWithinFolder');\n      });\n    },\n    deleteItem: function deleteItem(context, item) {\n      var fileRef = firebase.storage().ref(item.location.path_);\n      fileRef.delete().then(function () {\n        console.log('file deleted');\n        store.dispatch('getContentWithinFolder');\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    createFolder: function createFolder(context, newFolderName) {\n      var ref = context.getters.currentFolderRef.child(\"\".concat(newFolderName, \"/folderInitDoc.txt\"));\n      ref.putString('init new folder').then(function (snapshot) {\n        console.log(snapshot);\n        store.dispatch('getContentWithinFolder');\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    deleteFolder: function deleteFolder(context, prefix) {\n      prefix.listAll().then(function (res) {\n        res.items.forEach(function (item) {\n          context.dispatch('deleteItem', item);\n        });\n        res.prefixes.forEach(function (prefix) {\n          context.dispatch('deleteFolder', prefix);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    selectNode: function selectNode(context, _ref4) {\n      var node = _ref4.node,\n          type = _ref4.type;\n\n      if (type === 'file') {\n        var nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.getMetadata().then(function (metadata) {\n          var nodeInfo = {\n            node: node,\n            type: type,\n            metadata: metadata\n          };\n          context.commit('SET_NODE_INFO', nodeInfo);\n        });\n      } else if (type === 'folder') {\n        var _nodeRef = firebase.storage().ref(node.fullPath);\n\n        _nodeRef.listAll().then(function (res) {\n          var nodeInfo = {\n            node: node,\n            type: type,\n            subFolders: res.prefixes,\n            subFiles: res.items\n          };\n          context.commit('SET_NODE_INFO', nodeInfo);\n        });\n      }\n    }\n  }\n});\nstore.watch(function (state) {\n  return state.currentFolder;\n}, function () {\n  store.commit('CLEAR_CONTENT_WITHIN_FOLDER');\n  store.dispatch('getContentWithinFolder');\n});\nexport default store;",{"version":3,"sources":["/Users/roywang/Documents/GitHub/firebase_storage/src/store.js"],"names":["Vue","Vuex","use","firebase","auth","onAuthStateChanged","user","store","commit","Store","state","currentUser","loginMsg","currentFolder","contentWithinFolder","selectedNode","getters","currentFolderRef","root","uid","rootFolderRef","storage","ref","length","folderPath","join","child","mutations","SET_CURRENT_USER","SET_CONTENT_WITHIN_FOLDER","content","CLEAR_CONTENT_WITHIN_FOLDER","PUSH_FOLDER","folder","push","POP_FOLDER","index","splice","SET_LOGIN_MSG","msg","type","SET_NODE_INFO","info","CLEAR_NODE_INFO","actions","popFolder","context","pushFolder","prefix","name","getContentWithinFolder","listAll","then","res","items","forEach","item","fullPath","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","event","blob","response","blobURL","window","URL","createObjectURL","set","open","send","catch","err","console","log","createAccount","email","password","createUserWithEmailAndPassword","message","logIn","signInWithEmailAndPassword","signOut","uploadFile","file","fileRef","uploadTask","put","on","snapshot","percentage","bytesTransferred","totalBytes","code","dispatch","deleteItem","location","path_","delete","createFolder","newFolderName","putString","deleteFolder","prefixes","selectNode","node","nodeRef","getMetadata","metadata","nodeInfo","subFolders","subFiles","watch"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// fire base\nimport firebase from '@/firebaseConfig.js'\nfirebase.auth().onAuthStateChanged(user => {\n  store.commit('SET_CURRENT_USER', user);\n})\n\nconst store = new Vuex.Store({\n  state: {\n    currentUser: null,\n    loginMsg: null,\n    currentFolder: [],\n    contentWithinFolder: null,\n    selectedNode: null\n  },\n  getters: {\n    currentFolderRef: state => {\n      if (!state.currentUser) {\n        return null\n      }\n\n      const root = `users/${state.currentUser.uid}`;\n      const rootFolderRef = firebase.storage().ref(root);\n      if (!state.currentFolder.length) {\n        return rootFolderRef\n      }\n\n      const folderPath = state.currentFolder.join('/');\n      const currentFolderRef = rootFolderRef.child(folderPath);\n      return currentFolderRef\n    }\n  },\n  mutations: {\n    SET_CURRENT_USER(state, user) {\n      state.currentUser = user;\n    },\n    SET_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = content;\n    },\n    CLEAR_CONTENT_WITHIN_FOLDER(state, content) {\n      state.contentWithinFolder = null;\n    },\n    PUSH_FOLDER(state, folder) {\n      state.currentFolder.push(folder)\n    },\n    POP_FOLDER(state, index) {\n      state.currentFolder.splice(index + 1)\n    },\n    SET_LOGIN_MSG(state, {\n      msg,\n      type\n    }) {\n      state.loginMsg = {\n        msg,\n        type\n      };\n    },\n    SET_NODE_INFO(state, info) {\n      state.selectedNode = info;\n    },\n    CLEAR_NODE_INFO(state) {\n      state.selectedNode = null\n    }\n  },\n  actions: {\n    popFolder(context, index) {\n      context.commit('POP_FOLDER', index);\n    },\n    pushFolder(context, prefix) {\n      context.commit('PUSH_FOLDER', prefix.name);\n    },\n    getContentWithinFolder(context) {\n      context.getters.currentFolderRef.listAll().then(res => {\n          context.commit('SET_CONTENT_WITHIN_FOLDER', res)\n          // get download links\n          res.items.forEach(item => {\n            firebase.storage().ref(item.fullPath).getDownloadURL().then(url => {\n              const xhr = new XMLHttpRequest();\n              xhr.responseType = 'blob';\n              xhr.onload = function (event) {\n                const blob = xhr.response;\n                const blobURL = window.URL.createObjectURL(blob);\n                Vue.set(item, 'downloadLink', blobURL);\n              };\n              xhr.open('GET', url);\n              xhr.send();\n            })\n          })\n        })\n        .catch(err => {\n          console.log(err);\n        }).then(() => {\n          context.commit('CLEAR_NODE_INFO');\n        })\n    },\n    createAccount(context, {\n      email,\n      password\n    }) {\n      firebase.auth().createUserWithEmailAndPassword(email, password).then((res) => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: 'Account  has been successfully created!',\n            type: 'success'\n          })\n        })\n        .catch(err => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: err.message,\n            type: 'error'\n          });\n        })\n    },\n    logIn(context, {\n      email,\n      password\n    }) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then((res) => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: 'Successfully sign in!',\n            type: 'success'\n          });\n        })\n        .catch(err => {\n          context.commit('SET_LOGIN_MSG', {\n            msg: err.message,\n            type: 'error'\n          });\n        })\n    },\n    signOut(context) {\n      firebase.auth().signOut().then(res => {\n        context.commit('SET_LOGIN_MSG', {\n          msg: 'Successfully sign out.',\n          type: 'success'\n        });\n      }).catch(err => {\n        context.commit('SET_LOGIN_MSG', {\n          msg: err.message,\n          type: 'error'\n        });\n      })\n    },\n    uploadFile(context, file) {\n      const currentFolderRef = context.getters.currentFolderRef;\n      const fileRef = currentFolderRef.child(`/${file.name}`)\n      const uploadTask = fileRef.put(file);\n\n      uploadTask.on('state_changed', snapshot => {\n        const percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log(percentage);\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('uploiad paused');\n            break;\n          case 'running':\n            console.log('upload is running');\n            break;\n        }\n      }, err => {\n        switch (err.code) {\n          case 'storage/unauthorized':\n            console.log(err.code);\n            break;\n          case 'storage/canceled':\n            console.log(err.code);\n            break;\n          case 'storage/unknown':\n            console.log(err.code);\n            break;\n        }\n      }, () => {\n        store.dispatch('getContentWithinFolder');\n      })\n    },\n    deleteItem(context, item) {\n      const fileRef = firebase.storage().ref(item.location.path_);\n      fileRef.delete().then(() => {\n        console.log('file deleted');\n        store.dispatch('getContentWithinFolder');\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    createFolder(context, newFolderName) {\n      const ref = context.getters.currentFolderRef.child(\n        `${newFolderName}/folderInitDoc.txt`);\n      ref.putString('init new folder').then(snapshot => {\n        console.log(snapshot);\n        store.dispatch('getContentWithinFolder');\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    deleteFolder(context, prefix) {\n      prefix.listAll().then(res => {\n        res.items.forEach(item => {\n          context.dispatch('deleteItem', item);\n        })\n        res.prefixes.forEach(prefix => {\n          context.dispatch('deleteFolder', prefix);\n        })\n      }).catch(err => {\n        console.log(err);\n      })\n    },\n    selectNode(context, {\n      node,\n      type\n    }) {\n      if (type === 'file') {\n        const nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.getMetadata().then(metadata => {\n          const nodeInfo = {\n            node,\n            type,\n            metadata\n          }\n          context.commit('SET_NODE_INFO', nodeInfo)\n        })\n      } else if (type === 'folder') {\n        const nodeRef = firebase.storage().ref(node.fullPath);\n        nodeRef.listAll().then(res => {\n          const nodeInfo = {\n            node,\n            type,\n            subFolders: res.prefixes,\n            subFiles: res.items\n          }\n          context.commit('SET_NODE_INFO', nodeInfo)\n        })\n      }\n    }\n  },\n});\n\nstore.watch(state => {\n  return state.currentFolder\n}, () => {\n  store.commit('CLEAR_CONTENT_WITHIN_FOLDER')\n  store.dispatch('getContentWithinFolder');\n})\n\nexport default store\n"]}]}